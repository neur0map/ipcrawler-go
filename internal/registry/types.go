package registry

import (
	"time"
)

// VariableType represents the type/category of a variable
type VariableType string

const (
	TemplateVariable VariableType = "template" // Core template variables like {{target}}
	MagicVariable    VariableType = "magic"    // Generated by tool parsers like {{naabu_ports}}
	CombinedVariable VariableType = "combined" // Generated by result combiners like {{combined_ports}}
	ConfigVariable   VariableType = "config"   // Used in configuration files
	WorkflowVariable VariableType = "workflow" // Workflow-specific variable mappings
	PipelineVariable VariableType = "pipeline" // Pipeline modes like {{ports}}
)

// VariableCategory represents the functional category of a variable
type VariableCategory string

const (
	CoreCategory      VariableCategory = "core"      // Essential variables like target, workspace
	DirectoryCategory VariableCategory = "directory" // Directory path variables
	FileCategory      VariableCategory = "file"      // File-related variables
	MetadataCategory  VariableCategory = "metadata"  // Execution metadata like timestamp
	PortCategory      VariableCategory = "port"      // Port-related variables
	ServiceCategory   VariableCategory = "service"   // Service-related variables
	HostCategory      VariableCategory = "host"      // Host-related variables
	AnalysisCategory  VariableCategory = "analysis"  // Analysis and coverage variables
)

// DataType represents the data type of a variable's value
type DataType string

const (
	StringType     DataType = "string"      // Single string value
	StringListType DataType = "string_list" // Comma-separated list
	IntegerType    DataType = "integer"     // Numeric value
	BooleanType    DataType = "boolean"     // True/false value
	PathType       DataType = "path"        // File/directory path
	IPType         DataType = "ip"          // IP address or CIDR
	PortListType   DataType = "port_list"   // Port numbers (comma-separated)
)

// VariableSource represents where a variable originates
type VariableSource string

const (
	ExecutionContextSource VariableSource = "execution_context" // Built into execution context
	ToolParserSource       VariableSource = "tool_parser"       // Generated by tool output parsers
	ResultCombinerSource   VariableSource = "result_combiner"   // Generated by result combiners
	ConfigFileSource       VariableSource = "config_file"       // Defined in config files
	WorkflowFileSource     VariableSource = "workflow_file"     // Defined in workflow files
	UserDefinedSource      VariableSource = "user_defined"      // Manually defined
)

// UsageLocation represents where a variable is used
type UsageLocation struct {
	Type    string `json:"type"`    // "tool", "config", "workflow", "code"
	Path    string `json:"path"`    // File path or tool name
	Line    int    `json:"line"`    // Line number if applicable
	Context string `json:"context"` // Additional context information
}

// VariableRecord represents a complete variable entry in the registry
type VariableRecord struct {
	// Core Information
	Name        string           `json:"name"`        // Variable name with {{}} brackets
	Type        VariableType     `json:"type"`        // Variable type
	Category    VariableCategory `json:"category"`    // Functional category
	Description string           `json:"description"` // Human-readable description
	DataType    DataType         `json:"data_type"`   // Data type of the value

	// Origin Information
	Source   VariableSource `json:"source"`    // Where the variable originates
	ToolName string         `json:"tool_name"` // Associated tool (if applicable)

	// Example Values
	ExampleValues []string `json:"example_values"` // Example values for documentation
	DefaultValue  string   `json:"default_value"`  // Default value if any

	// Usage Information
	UsedIn []UsageLocation `json:"used_in"` // Where this variable is used

	// Statistics
	FirstDetected time.Time `json:"first_detected"` // When first discovered
	LastSeen      time.Time `json:"last_seen"`      // Last time seen/used
	UsageCount    int       `json:"usage_count"`    // How many times used
	AutoDetected  bool      `json:"auto_detected"`  // Whether auto-detected or manually added

	// Dependencies
	RequiredBy []string `json:"required_by"` // Variables that depend on this one
	DependsOn  []string `json:"depends_on"`  // Variables this one depends on

	// Metadata
	Tags       []string `json:"tags"`        // Additional tags for classification
	Deprecated bool     `json:"deprecated"`  // Whether this variable is deprecated
	ReplacedBy string   `json:"replaced_by"` // If deprecated, what replaces it
	Notes      string   `json:"notes"`       // Additional notes
}

// RegistryDatabase represents the complete variable registry
type RegistryDatabase struct {
	Version     string                     `json:"version"`      // Registry schema version
	LastUpdated time.Time                  `json:"last_updated"` // Last modification time
	Variables   map[string]*VariableRecord `json:"variables"`    // All variable records
	Statistics  RegistryStatistics         `json:"statistics"`   // Registry statistics
}

// RegistryStatistics contains aggregated statistics about the registry
type RegistryStatistics struct {
	TotalVariables      int                      `json:"total_variables"`
	VariablesByType     map[VariableType]int     `json:"variables_by_type"`
	VariablesByCategory map[VariableCategory]int `json:"variables_by_category"`
	VariablesBySource   map[VariableSource]int   `json:"variables_by_source"`
	AutoDetectedCount   int                      `json:"auto_detected_count"`
	ManuallyAddedCount  int                      `json:"manually_added_count"`
	DeprecatedCount     int                      `json:"deprecated_count"`
	UnusedVariables     []string                 `json:"unused_variables"`
	MostUsedVariables   []VariableUsageRank      `json:"most_used_variables"`
}

// VariableUsageRank represents a variable ranked by usage
type VariableUsageRank struct {
	Name       string `json:"name"`
	UsageCount int    `json:"usage_count"`
}

// DetectionContext contains context information for auto-detection
type DetectionContext struct {
	FilePath   string         `json:"file_path"`   // File where variable was found
	LineNumber int            `json:"line_number"` // Line number
	Context    string         `json:"context"`     // Surrounding context
	Source     VariableSource `json:"source"`      // Source type
	Tool       string         `json:"tool"`        // Associated tool if any
	Timestamp  time.Time      `json:"timestamp"`   // When detected
}

// RegistryManager interface defines operations for managing the variable registry
type RegistryManager interface {
	// Core CRUD operations
	AddVariable(record *VariableRecord) error
	GetVariable(name string) (*VariableRecord, error)
	UpdateVariable(name string, record *VariableRecord) error
	DeleteVariable(name string) error
	ListVariables() []*VariableRecord

	// Query operations
	GetVariablesByType(varType VariableType) []*VariableRecord
	GetVariablesByCategory(category VariableCategory) []*VariableRecord
	GetVariablesByTool(toolName string) []*VariableRecord
	SearchVariables(query string) []*VariableRecord

	// Auto-detection operations
	AutoRegisterVariable(name string, context DetectionContext) error
	UpdateUsage(name string, location UsageLocation) error

	// Statistics and analysis
	GetStatistics() RegistryStatistics
	GetUnusedVariables() []string
	ValidateRegistry() []string // Returns list of issues

	// Persistence operations
	SaveDatabase() error
	LoadDatabase() error
	ExportDatabase(format string) ([]byte, error)
}

// ScanResult represents the result of scanning for variables
type ScanResult struct {
	FilePath  string             `json:"file_path"`
	Variables []DetectedVariable `json:"variables"`
	Errors    []string           `json:"errors"`
}

// DetectedVariable represents a variable found during scanning
type DetectedVariable struct {
	Name       string         `json:"name"`
	LineNumber int            `json:"line_number"`
	Context    string         `json:"context"`
	Source     VariableSource `json:"source"`
}

// Scanner interface defines operations for scanning files/code for variables
type Scanner interface {
	ScanFile(filePath string) (*ScanResult, error)
	ScanDirectory(dirPath string) ([]*ScanResult, error)
	ScanString(content string, source VariableSource) ([]DetectedVariable, error)
}
